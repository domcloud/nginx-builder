diff --git a/bin/passenger-install-nginx-module b/bin/passenger-install-nginx-module
index 07762dcf..969ad958 100755
--- a/bin/passenger-install-nginx-module
+++ b/bin/passenger-install-nginx-module
@@ -109,6 +109,7 @@ def run_steps
     check_whether_system_has_enough_ram
 
     download_and_install = should_we_download_and_install_nginx_automatically?
+    no_make_install = should_we_do_not_run_nginx_install?
     if pcre_is_installed?
       @pcre_source_dir = nil
     else
@@ -133,7 +134,7 @@ def run_steps
       check_whether_other_nginx_installations_exist(nginx_prefix)
       extra_nginx_configure_flags = ask_for_extra_nginx_configure_flags(nginx_prefix)
     end
-    check_whether_we_can_write_to(nginx_prefix) || exit(1)
+    no_make_install || check_whether_we_can_write_to(nginx_prefix) || exit(1)
     nginx_config_already_exists_before_installing = nginx_config_exists?(nginx_prefix)
     if needs_compiling_support_files?
       if !compile_passenger_support_files
@@ -141,8 +142,8 @@ def run_steps
         exit(1)
       end
     end
-    if install_nginx(nginx_source_dir, nginx_prefix, extra_nginx_configure_flags)
-      if nginx_config_already_exists_before_installing || !locate_nginx_config_file(nginx_prefix)
+    if install_nginx(nginx_source_dir, nginx_prefix, extra_nginx_configure_flags, no_make_install)
+      if no_make_install || nginx_config_already_exists_before_installing || !locate_nginx_config_file(nginx_prefix)
         show_passenger_config_snippets(nginx_prefix)
       else
         insert_passenger_config_snippets(nginx_prefix)
@@ -265,6 +266,15 @@ def should_we_download_and_install_nginx_automatically?
     end
   end
 
+  def should_we_do_not_run_nginx_install?
+    if @nginx_no_install
+      puts "<b>Proceeding with no make install.</b>"
+      return true
+    else
+      return false
+    end
+  end
+
   def download_and_extract_pcre
     new_screen
     puts "<banner>PCRE (required by Nginx) not installed, downloading it...</banner>"
@@ -474,13 +484,17 @@ def nginx_config_exists?(prefix)
     return !!locate_nginx_config_file(prefix)
   end
 
-  def install_nginx(source_dir, prefix, extra_configure_flags)
+  def install_nginx(source_dir, prefix, extra_configure_flags, no_make_install)
     Dir.chdir(source_dir) do
       new_screen
-      puts "<banner>Compiling and installing Nginx...</banner>"
+      if no_make_install
+        puts "<banner>Compiling and installing Nginx...</banner>"
+      else
+        puts "<banner>Compiling without installing Nginx...</banner>"
+      end
       if !sh(build_nginx_configure_command(prefix, extra_configure_flags)) ||
          !sh("make") ||
-         !sh("make install")
+         !(no_make_install || sh("make install"))
         return false
       end
     end
@@ -647,6 +661,9 @@ def boolean_option(name)
           "#{indent}directory. Conflicts with --auto-download.") do |dir|
     options[:nginx_source_dir] = dir
   end
+  opts.on("--nginx-no-install", "Do not install NGINX?") do |dir|
+    options[:nginx_no_install] = true
+  end
   opts.on("--extra-configure-flags=STRING", String, "Pass these extra flags to Nginx's\n" <<
           "#{indent}'configure' script, instead of asking for\n" <<
           "#{indent}it interactively. Specify 'none' if you\n" <<
diff --git a/src/agent/Core/CoreMain.cpp b/src/agent/Core/CoreMain.cpp
index 9594201e..3e4cd525 100644
--- a/src/agent/Core/CoreMain.cpp
+++ b/src/agent/Core/CoreMain.cpp
@@ -1347,7 +1347,6 @@ runCore() {
 		initializeCurl();
 		initializeNonPrivilegedWorkingObjects();
 		initializeSecurityUpdateChecker();
-		initializeTelemetryCollector();
 		initializeAdminPanelConnector();
 		prestartWebApps();
 
diff --git a/src/nginx_module/ngx_http_passenger_module.c b/src/nginx_module/ngx_http_passenger_module.c
index 9f4d2383..d9a9b378 100644
--- a/src/nginx_module/ngx_http_passenger_module.c
+++ b/src/nginx_module/ngx_http_passenger_module.c
@@ -192,6 +192,29 @@ save_master_process_pid(ngx_cycle_t *cycle) {
     return NGX_OK;
 }
 
+static ngx_int_t
+save_child_process_pid(ngx_cycle_t *cycle) {
+    u_char filename[NGX_MAX_PATH];
+    u_char *last;
+    FILE *f;
+
+    last = ngx_snprintf(filename, sizeof(filename) - 1, "%s/web_server_info/child_processes.pid",
+                        psg_watchdog_launcher_get_instance_dir(psg_watchdog_launcher, NULL));
+    *last = (u_char) '\0';
+
+    f = fopen((const char *) filename, "a");
+    if (f != NULL) {
+        fprintf(f, "%ld\n", (long) getpid());
+        fclose(f);
+    } else {
+        ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
+                      "could not create %s", filename);
+    }
+
+    return NGX_OK;
+}
+
+
 typedef struct {
     ngx_cycle_t *cycle;
     int log_fd;
@@ -464,6 +487,18 @@ start_watchdog(ngx_cycle_t *cycle) {
         result = NGX_ERROR;
         goto cleanup;
     }
+    last = ngx_snprintf(filename, sizeof(filename) - 1,
+                        "%s/web_server_info/child_processes.pid",
+                        psg_watchdog_launcher_get_instance_dir(psg_watchdog_launcher, NULL));
+    *last = (u_char) '\0';
+    if (create_file(cycle, filename, (const u_char *) "", 0, (uid_t) core_conf->user, (gid_t) -1) != NGX_OK) {
+        result = NGX_ERROR;
+        goto cleanup;
+    }
+    if (ret == -1) {
+        result = NGX_ERROR;
+        goto cleanup;
+    }
 
 cleanup:
     psg_json_value_free(w_config);
@@ -509,7 +544,6 @@ pre_config_init(ngx_conf_t *cf)
 {
     char *error_message;
 
-    shutdown_watchdog();
 
     ngx_memzero(&passenger_main_conf, sizeof(passenger_main_conf_t));
     pp_schema_string.data = (u_char *) "passenger:";
@@ -571,6 +605,7 @@ init_worker_process(ngx_cycle_t *cycle) {
 
     if (passenger_main_conf.autogenerated.root_dir.len != 0 && !ngx_test_config) {
         save_master_process_pid(cycle);
+        save_child_process_pid(cycle);
 
         core_conf = (ngx_core_conf_t *) ngx_get_conf(cycle->conf_ctx, ngx_core_module);
         if (core_conf->master) {
